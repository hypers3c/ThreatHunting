A sample scenario for threat hunting that every hunter needs to follow. The case study focuses on adversary detection, analysis, and eviction.
Two main purposes to this case study scenario are: 
  • To learn technical hunt concepts 
  • To gain a better understanding of a practical hunting process
Consider a company that hasn’t recently identified any malicious behavior on the internal networks. Hunter decides to proactively hunt on the networks. In this sample, he/she uses the organization’s most recent cyber risk assessment report to determine priorities and select the assets to hunt on first.
The hunting phases that the hunter follows are:
  • Preparation
  • Investigation 
  • Adversary Removal 
  • Synopsis of the Hunt 
  • Reporting
=====================================================================================================================================
• Preparation:
  • Determine high priority assets:
  Before proactive hunting starts, the hunter needs to decide which assets should be the initial focus of the hunt. This can be gained from cyber risk assessment report of the company. The hunter reviews the highest-priority group of IT functions in the report and translates those functions, which are described from a business perspective (e.g., “credit card processing systems”), into the corresponding IT asset information that the hunt team needs: IP addresses, hostnames, process names, usernames, etc.
  • Review available IT assets and networks information:
  The hunter asks for the company’s latest IT network maps and asset inventory information. He will need to confirm as needed which assets of interest are currently connected to the network and to get more information on these assets, such as knowing which major applications each asset is authorized to run, which assets have used the organization’s networks in the past and what software they should be running. 
  • Understand what’s considered normal activity:
  A hunter who knows what’s normal for an organization’s assets and networks will be much better prepared to spot deviations from the norm. the hunter is new to the company, so it’s worth spending time talking with system administrators, incident responders, and other IT staff members to learn more about normal activity. This can be as simple as knowing what the typical work days and hours are for people in different roles within the company (e.g., standard users, managers, developers, system administrators.) This can also be complex, including gathering detailed information on which assets people in each role may access, and which applications are whitelisted (allowed) or blacklisted (prohibited) on the company’s assets.
  • Configure and deploy hunt sensor software:
  For operational reasons, the company might choose an on-demand deployment strategy or Enterprise-wide deployment. We suppose the company has chosen the first one. The hunter is responsible for ensuring that the hunt sensor software is deployed to all the assets included in the initial round of hunting and also configuring the default settings for the hunt sensors.
=======================================================================================================================================
• Investigation:
  So far, the hunter has completed all the preparatory activities. It’s time to investigate the selected assets for the presence of adversaries. This investigation is documented in four parts: 
    scoping the investigation
    gathering and analyzing information
    expanding the investigation
    reprioritizing the hunt
    
  • Scoping the investigation:
  Because there’s no evidence of compromises or other malicious activity involving these assets, the first step in this investigation is to scope the work by selecting which aspects of each asset will be examined initially. The hunter determines that the most important things to look for all involve the execution of processes and services. These characteristics may fall into three groups:
  o Currently running processes and services
  The hunter needs to examine the full path of the executable for each currently running process and service, to include the executable’s filename. Questions to be answered include:
  1. Should this executable be running on this machine? Does its full path seem reasonable? For example, is the executable running from the appropriate system or application directory?
  2. Which user ran the executable? Does this seem reasonable?
  3. Was the executable run from the command line? If so, what were the command line arguments?
  4. Does the code in the running process or service exist in a file stored on the asset’s disk? If no, why doesn’t such a file exist? 
  5. If the code is in a stored file, does the file’s hash match the vendor’s hash for the file? Does this file exist on other assets, is it in the same location, and does it have the same hash as the copies on the other assets?
  6. Which network connections are bound to the process or service? For each connection, the IP addresses and ports used by both endpoints must be noted.
  7. Does it appear that all the loaded modules (executables and DLLs) indicated by the Process Environment Block (PEB) and import tables for a particular process or service are appropriate?
  8. Are all registry keys associated with the process or service in the correct locations?
  9. Do all open file handles (the files that the process or service is reading from and/or writing to) make sense?
    o Recently run processes/services:
    The hunter also needs to examine available information about processes and services that were recently executed. Such information is available from the "Prefetch" folder and the registry keys for Application Compatibility Cache (ShimCache). This information must be evaluated to see if the processes and services run on the asset make sense. For example, did the full path of the executable seem reasonable?
    o Processes/services set to run in the future:
    The executables slated to be run can be identified in one of two places:
      	Registry auto-run keys. The purpose of these keys is to list executables to be automatically run in the future, such as when the asset is rebooted or when a local user logs in.
      	Scheduled tasks. Users can schedule a particular executable to run in the future and designate the date and time when it will be started.
  • Gathering and analyzing information
At this point, the hunter has defined the scope of the investigation but hasn’t yet collected the necessary information within that scope. The company’s hunt sensor software can automatically do this work on the hunter’s behalf, speeding up the hunt considerably. Remind three key concepts to keep in mind:
  	Assume that the asset has already been compromised.
  	Look for compromises at any phase of an attack, from an initial exploit to implants that the adversary is no longer utilizing.
  	Consider how an adversary would think and react. 
The hunter quickly discovers that the primary web server has a running process that seems suspicious. The hunter also takes a closer look at the compromised web server. Additional information to be obtained includes the following:
  The usernames for all users currently logged into the server
  The open file handles for all suspicious processes and services executing on the server
  A copy of each file stored on disk that’s related to the suspicious processes and services
  A memory dump for each suspicious process or service
  A packet capture of all network traffic for the server
  • Reprioritizing the hunt
  While the hunt sensors are collecting and analyzing more information, the hunter receives an alert from the hunt sensor on the company’s most critical database server. This alert indicates the presence of an unknown persistent service on that server, so he immediately reprioritizes hunting to focus on the database server.
  Throughout the hunt, hunters must constantly reprioritize their focus based on updated risk assessments, their understanding of the value of particular assets, and the security event information provided by hunt sensors and other enterprise security controls.
  A quick review of the current and recent hunt sensor monitoring within the database server indicates that the server has an established, encrypted connection to an external IP address.
  The hunter can see that a large amount of data is being transmitted from the database server to the external IP address, and that the service associated with the network connection is the same service that generated the unknown persistent service alert.
======================================================================================================================================
•	Adversary Removal
All evidence points to an adversary exfiltrate sensitive data from the company via the compromised database server. The hunter must act as quickly as possible to stop the compromise by disrupting the exfiltration communications. Possible methods for handling this situation include the following:
  	Suspend the thread or threads associated with the exfiltration. Pat must consider the likelihood that the activity is malicious and the criticality of the service being compromised by the thread.
  	Kill the service associated with the exfiltration. The hunter would rather suspend the thread than kill the service because the latter can cause a significant disruption to operations. On the other hand, the entire service could be malicious, in which case suspending the thread won’t be an effective form of remediation.
  	Disable network access. Isolating the database server from other servers prevents further exfiltration and blocks the adversary from accessing the database server. Of course, this isolation also prevents all operational use of the database server, which will cause major production outages.
In this case, the hunt sensor indicates that there’s a single malicious thread responsible for exfiltrating the data, and the service in question isn’t malicious. This makes the decision easy. Pat orders the database server’s hunt sensor to suspend the malicious thread. This action breaks the connection between the database server and the adversary while avoiding any disruption of the critical services that the database server provides to the company’s customers, employees, vendors, business partners, and contractors.
====================================================================================================================================
•	Synopsis of the Hunt
Let’s fast forward to the end of the hunt investigation and recovery actions related to the compromised database server. Here’s a synopsis of the most noteworthy actions:
1. Based on information provided by the hunter and the database server’s hunt sensor, the hunter searched all assets across the enterprise for the following:
  b. Any network connections involving the same external IP address that the database server was connected to and from which data was exfiltrated.
  c. Any files with the same filenames and/or file hashes as the malicious files found on the database server
  d. Any registry keys matching the malicious registry keys found on the database server
2. The search for these characteristics identified an additional compromised asset: a Microsoft Exchange server. This server had the same malicious thread, executable file, and registry keys found on the database server, but the executable on the Exchange server was not currently running.
3. The company’s incident response team forensically collected all files on the two servers associated with the malicious services, and they initiated chain of custody procedures. The files were turned over to the company’s malware reverse engineers for further analysis.
4. The hunter removed all of the malicious files (including executables and other DLLs) and associated malicious registry keys from the compromised assets.
5. System administrators discovered that the compromised web server was missing a patch. Without this patch, the server was susceptible to users executing arbitrary code. The system administrators also determined that the web server and the database server had the same username and password for their local administrator accounts. This is how the adversary gained privileged access to the database server.
6. System administrators forced the change of all passwords for all local accounts on the web server and database server to prevent future reuse of any credentials that were compromised.
7. When the hunter finished hunting on the database server, the hunt sensor was removed from the server in accordance with the company’s on-demand deployment strategy.
====================================================================================================================================
• Hunt Reporting
The hunter documented the findings and results for the hunt on an ongoing basis, issuing a separate report for each major compromise investigated through hunting. His report for the database server compromise includes the following information:
  	An executive summary that reiterates the most important points from the report
  	The scope of the compromise, such as which business processes, IT assets, users, data sets, etc. were affected, in what ways they were affected, and how long they were affected
  	The identity of the adversary, if known
  	A timeline of the activities involving the compromise and the hunt investigation into that compromise
  	A narrative corresponding to the timeline, indicating what the findings were at each step in the hunt process, which tools or techniques were used for each step, who received information from the hunters and when, what challenges or other issues were encountered and how they were resolved (or why they aren’t yet resolved), etc.
  	The root cause or causes of the compromise
  	Recommendations for improving the company’s security and for making future hunts more effective, and the consequences to the company if these recommendations are not followed
